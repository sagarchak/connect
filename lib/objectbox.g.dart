// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entity/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3224090724282318136),
      name: 'UserEntity',
      lastPropertyId: const IdUid(14, 4424958458519394160),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4696273495434682884),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1234797916109333726),
            name: 'custId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6970914233687984473),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1407924172760771438),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3254452430672648455),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7661668766851540118),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3006074680550220853),
            name: 'dob',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4459813422666588224),
            name: 'pan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8874812857803120233),
            name: 'aadhaar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7073260830256622560),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6839859384909390480),
            name: 'aboutMe',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 832560979019012638),
            name: 'points',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 794535577515821694),
            name: 'status',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4424958458519394160),
            name: 'updatedAt',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 3224090724282318136),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserEntity: EntityDefinition<UserEntity>(
        model: _entities[0],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final dobOffset =
              object.dob == null ? null : fbb.writeString(object.dob!);
          final panOffset =
              object.pan == null ? null : fbb.writeString(object.pan!);
          final aadhaarOffset =
              object.aadhaar == null ? null : fbb.writeString(object.aadhaar!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final aboutMeOffset =
              object.aboutMe == null ? null : fbb.writeString(object.aboutMe!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.custId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, mobileOffset);
          fbb.addOffset(5, addressOffset);
          fbb.addOffset(6, dobOffset);
          fbb.addOffset(7, panOffset);
          fbb.addOffset(8, aadhaarOffset);
          fbb.addOffset(9, imageOffset);
          fbb.addOffset(10, aboutMeOffset);
          fbb.addInt64(11, object.points);
          fbb.addInt64(12, object.status);
          fbb.addOffset(13, updatedAtOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserEntity()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..custId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..mobile = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..address = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..dob = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..pan = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..aadhaar = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..image = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..aboutMe = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..points =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26)
            ..status =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28)
            ..updatedAt = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// see [UserEntity.id]
  static final id =
      QueryIntegerProperty<UserEntity>(_entities[0].properties[0]);

  /// see [UserEntity.custId]
  static final custId =
      QueryIntegerProperty<UserEntity>(_entities[0].properties[1]);

  /// see [UserEntity.name]
  static final name =
      QueryStringProperty<UserEntity>(_entities[0].properties[2]);

  /// see [UserEntity.email]
  static final email =
      QueryStringProperty<UserEntity>(_entities[0].properties[3]);

  /// see [UserEntity.mobile]
  static final mobile =
      QueryStringProperty<UserEntity>(_entities[0].properties[4]);

  /// see [UserEntity.address]
  static final address =
      QueryStringProperty<UserEntity>(_entities[0].properties[5]);

  /// see [UserEntity.dob]
  static final dob =
      QueryStringProperty<UserEntity>(_entities[0].properties[6]);

  /// see [UserEntity.pan]
  static final pan =
      QueryStringProperty<UserEntity>(_entities[0].properties[7]);

  /// see [UserEntity.aadhaar]
  static final aadhaar =
      QueryStringProperty<UserEntity>(_entities[0].properties[8]);

  /// see [UserEntity.image]
  static final image =
      QueryStringProperty<UserEntity>(_entities[0].properties[9]);

  /// see [UserEntity.aboutMe]
  static final aboutMe =
      QueryStringProperty<UserEntity>(_entities[0].properties[10]);

  /// see [UserEntity.points]
  static final points =
      QueryIntegerProperty<UserEntity>(_entities[0].properties[11]);

  /// see [UserEntity.status]
  static final status =
      QueryIntegerProperty<UserEntity>(_entities[0].properties[12]);

  /// see [UserEntity.updatedAt]
  static final updatedAt =
      QueryStringProperty<UserEntity>(_entities[0].properties[13]);
}
